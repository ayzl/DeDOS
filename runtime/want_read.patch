diff --git a/runtime/src/include/modules/ssl_read_msu.h b/runtime/src/include/modules/ssl_read_msu.h
index 1a8e145..3d195c7 100644
--- a/runtime/src/include/modules/ssl_read_msu.h
+++ b/runtime/src/include/modules/ssl_read_msu.h
@@ -19,4 +19,5 @@ void InitServerSSLCtx(SSL_CTX **ctx);
 int LoadCertificates(SSL_CTX *Ctx, char *CertFile, char *KeyFile);
 char* GetSSLStateAndRequest(int SocketFD, SSL** State, struct generic_msu *self, char *);
 int ReadSSL(SSL *State, char *Buffer, int BufferSize);
+int AcceptSSL(SSL *State, char *Buffer);
 #endif /* __SSL_READ_MSU_H__ */
diff --git a/runtime/src/modules/ssl_read_msu.c b/runtime/src/modules/ssl_read_msu.c
index 756466d..e680cca 100644
--- a/runtime/src/modules/ssl_read_msu.c
+++ b/runtime/src/modules/ssl_read_msu.c
@@ -31,7 +31,8 @@ int ReadSSL(SSL *State, char *Buffer, int BufferSize)
     return 0;
 }

-int AcceptSSL(SSL *State){
+int AcceptSSL(SSL *State, char *Buffer){
+/*
     int ret;
     if ( (ret = SSL_accept(State) ) < 0 ){
         log_error("SSL_accept failed with ret: %d\n");
@@ -42,39 +43,45 @@ int AcceptSSL(SSL *State){
     //SSL_set_mode(State, SSL_MODE_AUTO_RETRY);
     return 0;
 }
+*/

-/*
-    //do {
+    int NumBytes;
+    int ret, err;
+
+    do {
         ret = SSL_accept(State);
         err = 0;
         if (ret < 0){
             log_warn("SSL_accept failed with ret = %d", ret);
             err = SSL_get_error(State, ret);
+            //SSLErrorCheck(err);
             if (err != SSL_ERROR_WANT_READ){
                 return -1;
             } else {
                 log_warn("SSL_accept got SSL_ERROR_WANT_READ");
             }
         }
-    //} while (err == SSL_ERROR_WANT_READ);
+    } while (err == SSL_ERROR_WANT_READ);


-    if ( (NumBytes = SSL_read(State, Buffer, BufferSize)) <= 0 ) {
+    if ( (NumBytes = SSL_read(State, Buffer, MAX_REQUEST_LEN)) <= 0 ) {
         err = SSL_get_error(State, NumBytes);
+        //SSLErrorCheck(err);

-        if ( err == SSL_ERROR_WANT_READ ){
-            return 0;
-        }
+        //if ( err == SSL_ERROR_WANT_READ ){
+        //    return 0;
+        //}

         char *error;

         while (err == SSL_ERROR_WANT_READ) {
             log_debug("SSL_read returned ret: %d. Errno: %s",
                       NumBytes, error);
-            NumBytes = SSL_read(State, Buffer, BufferSize);
+            NumBytes = SSL_read(State, Buffer, MAX_REQUEST_LEN);
             //strerror is not thread safe
             error = strerror(errno);
             err = SSL_get_error(State, NumBytes);
+            //SSLErrorCheck(err);
         }

         SSLErrorCheck(err);
@@ -82,7 +89,7 @@ int AcceptSSL(SSL *State){

     return NumBytes;
 }
-*/
+
 void InitServerSSLCtx(SSL_CTX **Ctx) {
     const SSL_METHOD *Method;

@@ -149,7 +156,7 @@ char* GetSSLStateAndRequest(int SocketFD, SSL **SSL_State, struct generic_msu *s
     }


-    int rtn = AcceptSSL(State);
+    int rtn = AcceptSSL(State, Request);
     if (rtn < 0){
         SSL_free(State);
         close(SocketFD);
@@ -160,7 +167,7 @@ char* GetSSLStateAndRequest(int SocketFD, SSL **SSL_State, struct generic_msu *s
     debug("MSU %d calling SSL_read", self->id);


-
+/*
     int ReadBytes;
     if ( ( ReadBytes = ReadSSL(State, Request, MAX_REQUEST_LEN) ) < 0 ) {
         log_error("SSL_read on socket %d failed. Data read: %s", SocketFD, Request);
@@ -169,7 +176,7 @@ char* GetSSLStateAndRequest(int SocketFD, SSL **SSL_State, struct generic_msu *s
         return NULL;
     }
     log_debug("ReadSSL returned: %d", ReadBytes);
-
+*/
     return Request;
 }
