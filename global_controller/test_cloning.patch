--- src/communication.c	2017-01-16 21:18:57.840568639 -0500
+++ ./communication.c.new	2017-01-16 21:18:46.956568639 -0500
@@ -25,6 +25,7 @@
 int control_listen_sock;
 int max_fd;

+int stat_listen_sock;
 //will contain info about each connected runtime

 int ipv4_to_string(char *ipbuf, const uint32_t ip)
@@ -169,8 +170,9 @@

     FD_ZERO(&readfds);
     FD_SET(control_listen_sock, &readfds);
+    FD_SET(stat_listen_sock, &readfds);

-    max_fd = control_listen_sock;
+    max_fd = (control_listen_sock > stat_listen_sock) ? control_listen_sock : stat_listen_sock;

     for (i = 0; i < MAX_RUNTIMES; i++) {
         if (worker_runtimes[i].sock > 0) {
@@ -236,6 +238,53 @@
                     "Cannot find any empty slots to store new connection");
         }
         show_connected_peers();
+    } else if (FD_ISSET(stat_listen_sock, &readfds)) {
+        //a new connection from some other runtime peer
+        int peer_sk;
+        peer_sk = accept(stat_listen_sock, NULL, NULL);
+        debug("DEBUG: peer_sk after accept on control socket: %d", peer_sk);
+        if (peer_sk < 0) {
+            debug("ERROR: %s",
+                    "Can't accept new connection on tcp control socket");
+            return;
+        }
+        if (setsockopt(peer_sk, IPPROTO_TCP, TCP_NODELAY, (void *) &opt,
+                sizeof(opt))) {
+            debug("ERROR: %s", "setting TCP_NODELAY");
+        }
+        if (getpeername(peer_sk, (struct sockaddr*) &addr, &len)) {
+            debug("ERROR: %s", "Failed to get peer info");
+        }
+        if (addr.ss_family != AF_INET) {
+            debug("ERROR: Not AF_INET family: %d\n", addr.ss_family);
+            close(peer_sk);
+            return;
+        }
+
+        char rcv_stat_buf[MAX_RCV_BUFLEN];
+        struct sockaddr_in remote_addr;
+        memset((char *) &rcv_stat_buf, 0, sizeof(rcv_stat_buf));
+        socklen_t len = sizeof(remote_addr);
+        ssize_t data_len = 0;
+
+        data_len = recvfrom(peer_sk, rcv_stat_buf, MAX_RCV_BUFLEN, 0, (void *) &remote_addr, &len);
+
+        struct dedos_control_msg *msg = (struct dedos_control_msg *) rcv_stat_buf;
+        if(msg->payload_len){
+            msg->payload = rcv_stat_buf + msg->header_len;
+        }
+        struct msu_stats_data *stats = (struct msu_stats_data *) msg->payload;
+
+        if (data_len == -1) {
+            debug("ERROR: %s", "Couldn't receive data on stat socket");
+        } else if (data_len == 0) {
+            FD_CLR(peer_sk, &readfds);
+            cleanup_peer_socket(peer_sk);
+            return;
+        } else {
+            process_stats_msg(stats, 4);
+        }
+
     } else {
         // all other peer sockets, received some msg from a runtime
         // understand it and reply if required
@@ -266,6 +315,9 @@

     control_listen_sock = start_listener_socket(tcp_control_listen_port, control_listen_sock);

+    int stat_port = 9999;
+    stat_listen_sock = start_listener_socket(stat_port, stat_listen_sock);
+
     if (!control_listen_sock > 0) {
         ret = -1;
     } else {
